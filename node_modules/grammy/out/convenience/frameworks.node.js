"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultAdapter = exports.adapters = void 0;
// deno-lint-ignore-file no-explicit-any
const frameworks_shared_js_1 = require("./frameworks.shared.js");
/** Node.js native 'http' and 'https' modules */
const http = (req, res) => {
    const secretHeaderFromRequest = req.headers[frameworks_shared_js_1.SECRET_HEADER.toLowerCase()];
    return {
        update: new Promise((resolve, reject) => {
            const chunks = [];
            req.on("data", (chunk) => chunks.push(chunk))
                .once("end", () => {
                const raw = Buffer.concat(chunks).toString("utf-8");
                resolve(JSON.parse(raw));
            })
                .once("error", reject);
        }),
        header: Array.isArray(secretHeaderFromRequest)
            ? secretHeaderFromRequest[0]
            : secretHeaderFromRequest,
        end: () => res.end(),
        respond: (json) => res
            .writeHead(200, { "Content-Type": "application/json" })
            .end(json),
        unauthorized: () => res.writeHead(401).end("secret token is wrong"),
    };
};
/** worktop CloudFlare workers framework */
const worktop = (req, res) => ({
    update: Promise.resolve(req.body.json()),
    header: req.headers.get(frameworks_shared_js_1.SECRET_HEADER),
    end: () => res.end(),
    respond: (json) => res.send(200, json),
    unauthorized: () => res.send(401, "secret token is wrong"),
});
/** AWS lambda serverless functions */
const awsLambda = (event, _context, callback) => ({
    update: JSON.parse(event.body),
    header: event.headers[frameworks_shared_js_1.SECRET_HEADER],
    end: () => callback(null, { statusCode: 200 }),
    respond: (json) => callback(null, { statusCode: 200, body: json }),
    unauthorized: () => callback(null, { statusCode: 401 }),
});
// please open a PR if you want to add another
exports.adapters = {
    http,
    https: http,
    worktop,
    "aws-lambda": awsLambda,
    ...frameworks_shared_js_1.adapters,
};
exports.defaultAdapter = "express";
