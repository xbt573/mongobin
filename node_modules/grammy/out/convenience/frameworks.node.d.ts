/// <reference types="node" />
import { type IncomingMessage, type ServerResponse } from "http";
export declare const adapters: {
    express: (req: any, res: any) => {
        update: Promise<any>;
        header: any;
        end: () => any;
        respond: (json: string) => void;
        unauthorized: () => void;
    };
    koa: (ctx: any) => {
        update: Promise<any>;
        header: any;
        end: () => void;
        respond: (json: string) => void;
        unauthorized: () => void;
    };
    fastify: (req: any, reply: any) => {
        update: Promise<any>;
        header: any;
        end: () => any;
        respond: (json: string) => any;
        unauthorized: () => any;
    };
    http: (req: IncomingMessage, res: ServerResponse) => {
        update: Promise<any>;
        header: string | undefined;
        end: () => ServerResponse;
        respond: (json: string) => ServerResponse;
        unauthorized: () => ServerResponse;
    };
    https: (req: IncomingMessage, res: ServerResponse) => {
        update: Promise<any>;
        header: string | undefined;
        end: () => ServerResponse;
        respond: (json: string) => ServerResponse;
        unauthorized: () => ServerResponse;
    };
    worktop: (req: any, res: any) => {
        update: Promise<any>;
        header: any;
        end: () => any;
        respond: (json: string) => any;
        unauthorized: () => any;
    };
    "aws-lambda": (event: any, _context: any, callback: any) => {
        update: any;
        header: any;
        end: () => any;
        respond: (json: string) => any;
        unauthorized: () => any;
    };
};
export declare const defaultAdapter = "express";
